export interface SerializedData {
    data: unknown;
    __serializedType__: string;
    __serializedRef__?: number;
}
export declare function mark(data: unknown, type: string): SerializedData;
export declare function mark<K extends string>(data: {
    [key in K]: () => unknown;
}, type: string, transformMethod?: K | false): SerializedData;
export declare function mark<K extends string>(data: any, type: string, transformMethod?: 'toString' | false): SerializedData;
export declare function extract(data: unknown, type: string): SerializedData;
export declare function refer(data: unknown, type: string): SerializedData;
export declare function refer<K extends string>(data: {
    [key in K]: () => unknown;
}, type: string, transformMethod?: K | false, refs?: (new (data: any) => unknown)[] | null): SerializedData;
export declare function refer<K extends string>(data: any, type: string, transformMethod?: 'toString' | false, refs?: (new (data: any) => unknown)[] | null): SerializedData;
