"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = serialize;
var _helpers = require("../helpers");
var _options = _interopRequireDefault(require("../constants/options"));
function serialize(immutable, refs, customReplacer, customReviver) {
  function replacer(key, value) {
    if (value instanceof immutable.Record) return (0, _helpers.refer)(value, 'ImmutableRecord', 'toObject', refs);
    if (value instanceof immutable.Range) return (0, _helpers.extract)(value, 'ImmutableRange');
    if (value instanceof immutable.Repeat) return (0, _helpers.extract)(value, 'ImmutableRepeat');
    if (immutable.OrderedMap.isOrderedMap(value)) return (0, _helpers.mark)(value, 'ImmutableOrderedMap', 'toObject');
    if (immutable.Map.isMap(value)) return (0, _helpers.mark)(value, 'ImmutableMap', 'toObject');
    if (immutable.List.isList(value)) return (0, _helpers.mark)(value, 'ImmutableList', 'toArray');
    if (immutable.OrderedSet.isOrderedSet(value)) return (0, _helpers.mark)(value, 'ImmutableOrderedSet', 'toArray');
    if (immutable.Set.isSet(value)) return (0, _helpers.mark)(value, 'ImmutableSet', 'toArray');
    if (immutable.Seq.isSeq(value)) return (0, _helpers.mark)(value, 'ImmutableSeq', 'toArray');
    if (immutable.Stack.isStack(value)) return (0, _helpers.mark)(value, 'ImmutableStack', 'toArray');
    return value;
  }
  function reviver(key, value) {
    if (typeof value === 'object' && value !== null && '__serializedType__' in value) {
      const immutableValue = value;
      switch (immutableValue.__serializedType__) {
        case 'ImmutableMap':
          return immutable.Map(immutableValue.data);
        case 'ImmutableOrderedMap':
          return immutable.OrderedMap(immutableValue.data);
        case 'ImmutableList':
          return immutable.List(immutableValue.data);
        case 'ImmutableRange':
          return immutable.Range(immutableValue.data._start, immutableValue.data._end, immutableValue.data._step);
        case 'ImmutableRepeat':
          return immutable.Repeat(immutableValue.data._value, immutableValue.data.size);
        case 'ImmutableSet':
          return immutable.Set(immutableValue.data);
        case 'ImmutableOrderedSet':
          return immutable.OrderedSet(immutableValue.data);
        case 'ImmutableSeq':
          return immutable.Seq(immutableValue.data);
        case 'ImmutableStack':
          return immutable.Stack(immutableValue.data);
        case 'ImmutableRecord':
          return refs && refs[immutableValue.__serializedRef__] ? new refs[immutableValue.__serializedRef__](immutableValue.data) : immutable.Map(immutableValue.data);
        default:
          return immutableValue.data;
      }
    }
    return value;
  }
  return {
    replacer: customReplacer ? function (key, value) {
      return customReplacer(key, value, replacer);
    } : replacer,
    reviver: customReviver ? function (key, value) {
      return customReviver(key, value, reviver);
    } : reviver,
    options: _options.default
  };
}