import Immutable from 'immutable';
import { Action, ActionCreator } from 'redux';
export declare function generateId(id: string | undefined): string;
export interface ActionCreatorObject {
    readonly name: string;
    readonly func: ActionCreator<Action<string>>;
    readonly args: readonly string[];
}
export declare function getMethods(obj: unknown): {
    name: string;
    args: string[];
}[] | undefined;
export declare function getActionsArray(actionCreators: {
    [key: string]: ActionCreator<Action<string>>;
}): ActionCreatorObject[] | ({
    [key: string]: ActionCreator<Action<string>, any[]>;
} & any[]);
export declare function evalAction(action: string | {
    args: string[];
    rest: string;
    selected: number;
}, actionCreators: readonly ActionCreatorObject[]): any;
export declare function evalMethod(action: string | {
    args: string[];
    rest: string;
    name: string;
}, obj: unknown): any;
export declare function stringify(obj: unknown, serialize?: {
    replacer?: (key: string, value: unknown) => unknown;
    options?: unknown | boolean;
} | true): string;
export declare function getSeralizeParameter(config: {
    serialize?: {
        immutable?: typeof Immutable;
        refs?: (new (data: any) => unknown)[] | null;
        replacer?: (key: string, value: unknown) => unknown;
        options?: unknown | boolean;
    } | boolean;
}, param: string): {
    replacer?: (key: string, value: unknown) => unknown;
    options: unknown | boolean;
} | undefined;
export declare function getStackTrace(config: {
    trace?: () => {};
    traceLimit: number;
}, toExcludeFromTrace?: Function | undefined): {} | undefined;
export * from './catchErrors';
export * from './filters';
export * from './importState';
