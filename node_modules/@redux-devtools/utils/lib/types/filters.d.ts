import { PerformAction } from '@redux-devtools/core';
import { Action } from 'redux';
export interface State {
    actionsById: {
        [actionId: number]: PerformAction<Action<string>>;
    };
    computedStates: {
        state: unknown;
        error?: string;
    }[];
    stagedActionIds: number[];
}
export declare const FilterState: {
    DO_NOT_FILTER: string;
    DENYLIST_SPECIFIC: string;
    ALLOWLIST_SPECIFIC: string;
};
export declare function arrToRegex(v: string | string[]): string;
interface Config {
    /**
     * @deprecated Use actionsDenylist instead.
     */
    readonly actionsBlacklist?: string | readonly string[];
    /**
     * @deprecated Use actionsAllowlist instead.
     */
    readonly actionsWhitelist?: string | readonly string[];
    readonly actionsDenylist?: string | readonly string[];
    readonly actionsAllowlist?: string | readonly string[];
}
export interface LocalFilter {
    allowlist: string | undefined;
    denylist: string | undefined;
}
export declare function getLocalFilter(config: Config): LocalFilter | undefined;
export declare function isFiltered(action: PerformAction<Action<string>> | Action<string>, localFilter?: LocalFilter): boolean | "" | RegExpMatchArray | null | undefined;
export declare function filterStagedActions(state: State, filters: LocalFilter | undefined): State;
export declare function filterState(state: State, type: string, localFilter: LocalFilter | undefined, stateSanitizer: ((state: unknown, actionId: number) => unknown) | undefined, actionSanitizer: ((action: Action<string>, id: number) => Action) | undefined, nextActionId: number, predicate?: (currState: unknown, currAction: Action<string>) => boolean): unknown;
export {};
