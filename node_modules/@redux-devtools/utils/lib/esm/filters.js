export const FilterState = {
  DO_NOT_FILTER: 'DO_NOT_FILTER',
  DENYLIST_SPECIFIC: 'DENYLIST_SPECIFIC',
  ALLOWLIST_SPECIFIC: 'ALLOWLIST_SPECIFIC'
};
export function arrToRegex(v) {
  return typeof v === 'string' ? v : v.join('|');
}
function filterActions(actionsById, actionSanitizer) {
  if (!actionSanitizer) return actionsById;
  return Object.fromEntries(Object.entries(actionsById).map(_ref => {
    let [actionId, action] = _ref;
    return [actionId, {
      ...action,
      action: actionSanitizer(action.action, actionId)
    }];
  }));
}
function filterStates(computedStates, stateSanitizer) {
  if (!stateSanitizer) return computedStates;
  return computedStates.map((state, idx) => ({
    ...state,
    state: stateSanitizer(state.state, idx)
  }));
}
function isArray(arg) {
  return Array.isArray(arg);
}
export function getLocalFilter(config) {
  const denylist = config.actionsDenylist ?? config.actionsBlacklist;
  const allowlist = config.actionsAllowlist ?? config.actionsWhitelist;
  if (denylist || allowlist) {
    return {
      allowlist: isArray(allowlist) ? allowlist.join('|') : allowlist,
      denylist: isArray(denylist) ? denylist.join('|') : denylist
    };
  }
  return undefined;
}
function getDevToolsOptions() {
  return typeof window !== 'undefined' && window.devToolsOptions || {};
}
export function isFiltered(action, localFilter) {
  const {
    type
  } = action.action || action;
  const opts = getDevToolsOptions();
  if (!localFilter && opts.filter && opts.filter === FilterState.DO_NOT_FILTER || type && typeof type.match !== 'function') return false;
  const {
    allowlist,
    denylist
  } = localFilter || opts;
  return (
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    allowlist && !type.match(allowlist) ||
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    denylist && type.match(denylist)
  );
}
export function filterStagedActions(state, filters) {
  if (!filters) return state;
  const filteredStagedActionIds = [];
  const filteredComputedStates = [];
  state.stagedActionIds.forEach((id, idx) => {
    if (!isFiltered(state.actionsById[id], filters)) {
      filteredStagedActionIds.push(id);
      filteredComputedStates.push(state.computedStates[idx]);
    }
  });
  return {
    ...state,
    stagedActionIds: filteredStagedActionIds,
    computedStates: filteredComputedStates
  };
}
export function filterState(state, type, localFilter, stateSanitizer, actionSanitizer, nextActionId, predicate) {
  if (type === 'ACTION') return !stateSanitizer ? state : stateSanitizer(state, nextActionId - 1);else if (type !== 'STATE') return state;
  const {
    filter
  } = getDevToolsOptions();
  if (predicate || localFilter || filter && filter !== FilterState.DO_NOT_FILTER) {
    const filteredStagedActionIds = [];
    const filteredComputedStates = [];
    const sanitizedActionsById = actionSanitizer && {};
    const {
      actionsById
    } = state;
    const {
      computedStates
    } = state;
    state.stagedActionIds.forEach((id, idx) => {
      const liftedAction = actionsById[id];
      const currAction = liftedAction.action;
      const liftedState = computedStates[idx];
      const currState = liftedState.state;
      if (idx) {
        if (predicate && !predicate(currState, currAction)) return;
        if (isFiltered(currAction, localFilter)) return;
      }
      filteredStagedActionIds.push(id);
      filteredComputedStates.push(stateSanitizer ? {
        ...liftedState,
        state: stateSanitizer(currState, idx)
      } : liftedState);
      if (actionSanitizer) {
        sanitizedActionsById[id] = {
          ...liftedAction,
          action: actionSanitizer(currAction, id)
        };
      }
    });
    return {
      ...state,
      actionsById: sanitizedActionsById || actionsById,
      stagedActionIds: filteredStagedActionIds,
      computedStates: filteredComputedStates
    };
  }
  if (!stateSanitizer && !actionSanitizer) return state;
  return {
    ...state,
    actionsById: filterActions(state.actionsById, actionSanitizer),
    computedStates: filterStates(state.computedStates, stateSanitizer)
  };
}