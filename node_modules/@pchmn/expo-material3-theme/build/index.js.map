{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAGxC,OAAO,wBAAwB,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,0BAA0B,EAAE,4BAA4B,EAAE,MAAM,8BAA8B,CAAC;AAExG,MAAM,CAAC,MAAM,uBAAuB,GAClC,CAAC,CAAC,wBAAwB,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC;AAEpF;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,iBAAiB,CAAC,MAA+D;IAC/F,MAAM,EAAE,mBAAmB,GAAG,SAAS,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,EAAE,CAAC;IAEtE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAChC,WAAW,CAAC,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CACzF,CAAC;IAEF,MAAM,WAAW,GAAG,CAAC,WAAmB,EAAE,EAAE;QAC1C,QAAQ,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;IAEF,MAAM,UAAU,GAAG,GAAG,EAAE;QACtB,QAAQ,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC;AAC5C,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,iBAAiB,CAAC,sBAA8B,SAAS;IACvE,IAAI,CAAC,uBAAuB,EAAE;QAC5B,OAAO,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;KACxD;IAED,MAAM,aAAa,GAAG,wBAAwB,CAAC,cAAc,EAGrD,CAAC;IAET,IAAI,aAAa,EAAE;QACjB,OAAO,4BAA4B,CAAC,aAAa,CAAC,CAAC;KACpD;IACD,OAAO,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,sBAA8B,SAAS;IAClF,IAAI,CAAC,uBAAuB,EAAE;QAC5B,OAAO,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;KACxD;IAED,MAAM,aAAa,GAAG,CAAC,MAAM,wBAAwB,CAAC,mBAAmB,EAAE,CAGnE,CAAC;IAET,IAAI,aAAa,EAAE;QACjB,OAAO,4BAA4B,CAAC,aAAa,CAAC,CAAC;KACpD;IACD,OAAO,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;AACzD,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAAC,WAAmB;IACtD,OAAO,0BAA0B,CAAC,WAAW,CAAC,CAAC;AACjD,CAAC","sourcesContent":["import { useState } from 'react';\nimport { Platform } from 'react-native';\n\nimport { Material3Scheme, Material3Theme, SystemScheme } from './ExpoMaterial3Theme.types';\nimport ExpoMaterial3ThemeModule from './ExpoMaterial3ThemeModule';\nimport { createThemeFromSourceColor, createThemeFromSystemSchemes } from './utils/createMaterial3Theme';\n\nexport const isDynamicThemeSupported =\n  !!ExpoMaterial3ThemeModule && Platform.OS === 'android' && Platform.Version >= 31;\n\n/**\n * Hook to manage material3 theme.\n *\n * It returns:\n * - a Material 3 theme:\n *   - the system theme (or a fallback theme if not supported) if sourceColor is not provided\n *   - a theme based on sourceColor if provided\n * - a function to update the theme based on a source color\n * - a function to reset the theme to default\n *\n * @param params.fallbackSourceColor - optional - source color for the fallback theme (default to #6750A4)\n * @param params.sourceColor - optional - source color for the theme (overwrite system theme)\n * @returns\n */\nexport function useMaterial3Theme(params?: { fallbackSourceColor?: string; sourceColor?: string }) {\n  const { fallbackSourceColor = '#6750A4', sourceColor } = params || {};\n\n  const [theme, setTheme] = useState<Material3Theme>(\n    sourceColor ? createMaterial3Theme(sourceColor) : getMaterial3Theme(fallbackSourceColor)\n  );\n\n  const updateTheme = (sourceColor: string) => {\n    setTheme(createThemeFromSourceColor(sourceColor));\n  };\n\n  const resetTheme = () => {\n    setTheme(getMaterial3Theme(fallbackSourceColor));\n  };\n\n  return { theme, updateTheme, resetTheme };\n}\n\n/**\n * Get the Material 3 theme from the system (works only on Android 12+).\n *\n * If the system does not support Material3, it will return a theme based on the fallback source color.\n *\n * @param fallbackSourceColor source color for the fallback theme (default to #6750A4)\n * @returns\n */\nexport function getMaterial3Theme(fallbackSourceColor: string = '#6750A4'): Material3Theme {\n  if (!isDynamicThemeSupported) {\n    return createThemeFromSourceColor(fallbackSourceColor);\n  }\n\n  const systemSchemes = ExpoMaterial3ThemeModule.getSystemTheme() as {\n    light: SystemScheme;\n    dark: SystemScheme;\n  } | null;\n\n  if (systemSchemes) {\n    return createThemeFromSystemSchemes(systemSchemes);\n  }\n  return createThemeFromSourceColor(fallbackSourceColor);\n}\n\nexport async function getMaterial3ThemeAsync(fallbackSourceColor: string = '#6750A4'): Promise<Material3Theme> {\n  if (!isDynamicThemeSupported) {\n    return createThemeFromSourceColor(fallbackSourceColor);\n  }\n\n  const systemSchemes = (await ExpoMaterial3ThemeModule.getSystemThemeAsync()) as {\n    light: SystemScheme;\n    dark: SystemScheme;\n  } | null;\n\n  if (systemSchemes) {\n    return createThemeFromSystemSchemes(systemSchemes);\n  }\n  return createThemeFromSourceColor(fallbackSourceColor);\n}\n\n/**\n * Create a Material 3 theme based on the source color.\n *\n * @param sourceColor source color for the theme\n * @returns\n */\nexport function createMaterial3Theme(sourceColor: string): Material3Theme {\n  return createThemeFromSourceColor(sourceColor);\n}\n\nexport { Material3Scheme, Material3Theme };\n"]}